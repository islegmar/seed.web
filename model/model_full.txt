# ------------------------------------------------------------------------------
# Model file for a more comples use case
#
# The model file defines the ENTIRE data model and is the input file to generate
# the base model/<MODULE>.json files
# 
# SYNTAX:
# - Comment lines : lines starting with # are ignored
# - Empty lines : ignored
# - Start a module's definition : lines containing [<MODULE>]. Following lines 
#   are the fields' definitions
# - Field definition:
#   + <Name> : defines a String of 255
#   + <Name>:<Type> : defines a field of type <Type> with no arguments
#   + <Name>:<Type>(<arg1>, ....) : defines a field of type <Type> with 
#     some configuration parameters (depending on the type)
#
# List of <Type>
# - String (this is the default, if the type is not specified, String will be used)
# - FK. In this case it has the format FK(<module>,<field>,association|aggregation)
#   It will generate a link of type 'association' or 'aggregation' to the module
#   <module>, where <field> will be the field shown when building the 'selects'.
# - Image
# - File
# - Integer 
# - Text
# - Date : it will generate a field of type DateTime with format dd/MM/yy HH:mm
#
# Generate the config files.
# Once this file is ready execute
#
#   cd scripts
#   python genConfig.py --file ../model/model_full.txt --i18n
#   python genI18N.py --regenerate
#   python createWebProject.py --full
#   python createWebModule.py --full
#
# Then in the default docker configuration go to
#
#   http://localhost:9090/fe
#
# Execute 'python python genConfig.py -h' for more help
# ------------------------------------------------------------------------------

# ------------------------------------------------
# Enums
# ------------------------------------------------

[MetodoPago]
Name

[Estado]
Name

[Pais]
Name

[Idioma]
Name

# ------------------------------------------------
# Business Tables
# ------------------------------------------------

[Proveedor]
Name
IdMetodoPago:FK(MetodoPago,Name,association)
# If MetodoPago==Transferencia => # cuenta, null otherwise
InfoMetodoPago
IdEstado:FK(Estado,Name,association)
IdPais:FK(Pais,Name,association)
IdIdioma:FK(Idioma,Name,association)
ContactoNombre
ContactoApellidos
ContactoEmailPpal
ContactoTelfPpal
ContactoEmailOtro
ContactoTelfOtro
ContactoDirecc1
ContactoDirecc2

[Cliente]
Name
IdMetodoPago:FK(MetodoPago,Name,association)
# If MetodoPago==Transferencia => # cuenta, null otherwise
InfoMetodoPago
IdEstado:FK(Estado,Name,association)
IdPais:FK(Pais,Name,association)
IdIdioma:FK(Idioma,Name,association)
ContactoNombre
ContactoApellidos
ContactoEmailPpal
ContactoTelfPpal
ContactoEmailOtro
ContactoTelfOtro
ContactoDirecc1
ContactoDirecc2

[Marca]
Name
CreadaWhen:Date
EdidataWhen:Date

[MarcaProveedor]
IdMarca:FK(Marca,Name,aggregation)
IdProveedor:FK(Proveedor,Name,association)

[Campaign]
Name
Start:Date
End:Date
IdProveedor:FK(Proveedor,Name,association)
IdCliente:FK(Cliente,Name,association)
PercStart:Integer
PercEnd:Integer
AvisoEnviarMail:Bool
AvisoEnviarMailDias:Integer
AvisoRetraso:Bool
AvisoReytasoDias:Integer

[LogCampaign]
OnWhen:Date
Thing
Resultado
Detalle
IdCampaign:FK(Campaign,Name,aggregation)

[CampaignMarca]
IdCampaign:FK(Campaign,Name,aggregation)
IdMarca:FK(Marca,Name,association)

[Reporte]
IdCampaign:FK(Campaign,Name,association)
Start:Date
End:Date
IdProveedor:FK(Proveedor,Name,association)
IdCliente:FK(Cliente,Name,association)

#[Referencia]

#[Factura]

#[Calendario]

#[Archivo]
